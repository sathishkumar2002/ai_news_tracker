name: Run ETL every 6 hours

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:       # Allows manual trigger

jobs:
  run-etl:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for proper git diff checks

    - name: Debug - Show repository info
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Workflow triggered by: ${{ github.actor }}"
        echo "Branch: ${{ github.ref }}"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Ensure data directory exists
      run: |
        mkdir -p data
        if [ ! -f data/news_data.csv ]; then
          echo "title,description,url,publishedAt,source,image" > data/news_data.csv
        fi
        ls -la data/  # Debug: Show directory contents

    - name: Run ETL script
      env:
        GNEWS_API_KEY: ${{ secrets.GNEWS_API_KEY }}
      run: python etl.py

    - name: Debug - Show file changes
      run: |
        git status
        git diff --stat
        echo "CSV file size: $(du -h data/news_data.csv)"

    - name: Debug - Verify token availability
      env:
        GITHUB_TOKEN: ${{ secrets.PUSH_PAT || secrets.GITHUB_TOKEN }}
      run: |
        echo "Token preview: ${GITHUB_TOKEN:0:4}..."  # First 4 chars for verification
        echo "Token length: ${#GITHUB_TOKEN}"
        # Verify token has repo access
        curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }} | jq .permissions

    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.PUSH_PAT || secrets.GITHUB_TOKEN }}
      run: |
        # Configure git
        git config --global user.name "github-actions"
        git config --global user.email "actions@github.com"

        # Show git config for debugging
        git config --list

        # Check for changes
        git add data/news_data.csv
        git status
        if git diff --cached --quiet; then
          echo "âœ… No changes to commit"
          exit 0
        fi

        # Commit and push
        git commit -m "ðŸ”„ Auto-update news data [skip ci]"
        git push origin HEAD:main
        echo "Push successful!"

    - name: Debug - Final verification
      run: |
        echo "Last commit:"
        git log -n 1 --oneline
        echo "Remote branches:"
        git ls-remote --heads origin